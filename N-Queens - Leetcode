class Solution {
public:
    
    bool check(int col,int row,vector<string>& b,int n){
        int dr=row;
        int dc=col;
        while(dr>=0&&dc>=0){
            if(b[dr][dc]=='Q'){
                return false;
            }
            dr--;
            dc--;
        }
        dr=row;
        dc=col;
        while(dc>=0){
            if(b[dr][dc]=='Q'){
                return false;
            }
            dc--;
        }
        dr=row;
        dc=col;
        while(dr<n&&dc>=0){
            if(b[dr][dc]=='Q'){
                return false;
            }
            dr++;
            dc--;
        }
        return true;
    }
    
    void solve(int col,int n,vector<string>& b,vector<vector<string>>& a){
        if(col==n){
            a.push_back(b);
            return;
        }
        for(int row=0;row<n;row++){
            if(check(col,row,b,n)){
                b[row][col]='Q';
                solve(col+1,n,b,a);
                b[row][col]='.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        vector<string>board(n);
        string s(n,'.');
        for(int i=0;i<n;i++){
            board[i]=s;
        }
        solve(0,n,board,ans);
        return ans;
    }
};
